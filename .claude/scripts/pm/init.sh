#!/bin/bash

echo "Ê≠£Âú®ÂàùÂßãÂåñ..."
echo ""
echo ""

echo " ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó"
echo "‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë"
echo "‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë"
echo "‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë"
echo " ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù"

echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
echo "‚îÇ Claude Code Project Management  ‚îÇ"
echo "‚îÇ by https://x.com/aroussi        ‚îÇ"
echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
echo "https://github.com/automazeio/ccpm"
echo ""
echo ""

echo "üöÄ Ê≠£Âú®ÂàùÂßãÂåñ Claude Code PM Á≥ªÁªü"
echo "======================================"
echo ""

# Ê£ÄÊü•ÂøÖÈúÄÂ∑•ÂÖ∑
echo "üîç Ê≠£Âú®Ê£ÄÊü•‰æùËµñÈ°π..."

# Ê£ÄÊü• gh CLI
if command -v gh &> /dev/null; then
  echo "  ‚úÖ GitHub CLI (gh) Â∑≤ÂÆâË£Ö"
else
  echo "  ‚ùå Êú™ÊâæÂà∞ GitHub CLI (gh)"
  echo ""
  echo "  Ê≠£Âú®ÂÆâË£Ö gh..."
  if command -v brew &> /dev/null; then
    brew install gh
  elif command -v apt-get &> /dev/null; then
    sudo apt-get update && sudo apt-get install gh
  else
    echo "  ËØ∑ÊâãÂä®ÂÆâË£Ö GitHub CLI: https://cli.github.com/"
    exit 1
  fi
fi

# Ê£ÄÊü• gh ËÆ§ËØÅÁä∂ÊÄÅ
echo ""
echo "üîê Ê≠£Âú®Ê£ÄÊü• GitHub ËÆ§ËØÅ..."
if gh auth status &> /dev/null; then
  echo "  ‚úÖ GitHub Â∑≤ËÆ§ËØÅ"
else
  echo "  ‚ö†Ô∏è GitHub Êú™ËÆ§ËØÅ"
  echo "  Ê≠£Âú®ËøêË°å: gh auth login"
  gh auth login
fi

# Ê£ÄÊü• gh-sub-issue Êâ©Â±ï
echo ""
echo "üì¶ Ê≠£Âú®Ê£ÄÊü• gh Êâ©Â±ï..."
if gh extension list | grep -q "yahsan2/gh-sub-issue"; then
  echo "  ‚úÖ gh-sub-issue Êâ©Â±ïÂ∑≤ÂÆâË£Ö"
else
  echo "  üì• Ê≠£Âú®ÂÆâË£Ö gh-sub-issue Êâ©Â±ï..."
  gh extension install yahsan2/gh-sub-issue
fi

# ÂàõÂª∫ÁõÆÂΩïÁªìÊûÑ
echo ""
echo "üìÅ Ê≠£Âú®ÂàõÂª∫ÁõÆÂΩïÁªìÊûÑ..."
mkdir -p .claude/prds
mkdir -p .claude/epics
mkdir -p .claude/rules
mkdir -p .claude/agents
mkdir -p .claude/scripts/pm
echo "  ‚úÖ ÁõÆÂΩïÂ∑≤ÂàõÂª∫"

# Copy scripts if in main repo
if [ -d "scripts/pm" ] && [ ! "$(pwd)" = *"/.claude"* ]; then
  echo ""
  echo "üìù Copying PM scripts..."
  cp -r scripts/pm/* .claude/scripts/pm/
  chmod +x .claude/scripts/pm/*.sh
  echo "  ‚úÖ Scripts copied and made executable"
fi

# Check for git
echo ""
echo "üîó Checking Git configuration..."
if git rev-parse --git-dir > /dev/null 2>&1; then
  echo "  ‚úÖ Git repository detected"

  # Check remote
  if git remote -v | grep -q origin; then
    remote_url=$(git remote get-url origin)
    echo "  ‚úÖ Remote configured: $remote_url"
    
    # Check if remote is the CCPM template repository
    if [[ "$remote_url" == *"automazeio/ccpm"* ]] || [[ "$remote_url" == *"automazeio/ccpm.git"* ]]; then
      echo ""
      echo "  ‚ö†Ô∏è WARNING: Your remote origin points to the CCPM template repository!"
      echo "  This means any issues you create will go to the template repo, not your project."
      echo ""
      echo "  To fix this:"
      echo "  1. Fork the repository or create your own on GitHub"
      echo "  2. Update your remote:"
      echo "     git remote set-url origin https://github.com/YOUR_USERNAME/YOUR_REPO.git"
      echo ""
    fi
  else
    echo "  ‚ö†Ô∏è No remote configured"
    echo "  Add with: git remote add origin <url>"
  fi
else
  echo "  ‚ö†Ô∏è Not a git repository"
  echo "  Initialize with: git init"
fi

# Create CLAUDE.md if it doesn't exist
if [ ! -f "CLAUDE.md" ]; then
  echo ""
  echo "üìÑ Creating CLAUDE.md..."
  cat > CLAUDE.md << 'EOF'
# CLAUDE.md

> Think carefully and implement the most concise solution that changes as little code as possible.

## Project-Specific Instructions

Add your project-specific instructions here.

## Testing

Always run tests before committing:
- `npm test` or equivalent for your stack

## Code Style

Follow existing patterns in the codebase.
EOF
  echo "  ‚úÖ CLAUDE.md created"
fi

# Summary
echo ""
echo "‚úÖ Initialization Complete!"
echo "=========================="
echo ""
echo "üìä System Status:"
gh --version | head -1
echo "  Extensions: $(gh extension list | wc -l) installed"
echo "  Auth: $(gh auth status 2>&1 | grep -o 'Logged in to [^ ]*' || echo 'Not authenticated')"
echo ""
echo "üéØ Next Steps:"
echo "  1. Create your first PRD: /pm:prd-new <feature-name>"
echo "  2. View help: /pm:help"
echo "  3. Check status: /pm:status"
echo ""
echo "üìö Documentation: README.md"

exit 0
